name: Test Environment Check

on:
  push:
    branches: [ "main", "documentation" ]

  workflow_dispatch:

permissions:
  contents: write
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  PoetrySetup:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v4
      - name: Set up python
        id: setup-python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10.14'
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root
      - name: Install project
        run: poetry install --no-interaction
      - name: Push to PyPl
        run: |
          poetry config pypi-token.pypi ${{ secrets.PYPL }}
          poetry build
          poetry publish

#      - name: Build the Docker image
#        run: |
#          poetry export --without-hashes --format=requirements.txt > requirements.txt
#          docker-compose build
#      - name: Push Docker Image
#        run: |
#          docker tag super_plant_phenotyper3000:latest plantphenotyper/plant_phenotyper_test:latest
#          docker login -u plantphenotyper -p ${{ secrets.DOCKER }}
#          docker push plantphenotyper/plant_phenotyper_test:latest

#      - name: Refresh docs
#        if: ${{ hashFiles('docs/') != '' }}
#        run:
#          rm -r docs
#      - name: Generate docs
#        run: |
#          poetry run sphinx-quickstart docs --quiet -p NPEC -a BUas -v 1.0 -t config/
#          poetry run sphinx-apidoc -o docs testasddsa/
#          pip install sphinx-rtd-theme
#          cd docs
#          poetry run make html
#      - name: Update changes
#        run: |
#          git config user.name "Borislav Nachev"
#          git config user.email "220472@buas.nl"
#          git fetch
#          git add .
#          git commit -m "documentation auto commit"
#          git checkout  documentation
#          git merge main -Xtheirs --allow-unrelated-histories
#          poetry run python ./config/keep_documentation.py
#          git commit -m "documentation auto commit"
#
#      - name: Push changes to source branch
#        uses: ad-m/github-push-action@master
#        with:
#          github_token: ${{ secrets.GITHUB_TOKEN }}
#          branch: documentation


#  DeployHtml:
#    needs: PoetrySetup
#    environment:
#      name: github-pages
#      url: ${{ steps.deployment.outputs.page_url }}
#    runs-on: ubuntu-latest
#    steps:
#      - name: Checkout
#        uses: actions/checkout@v4
#      - name: Setup Pages
#        uses: actions/configure-pages@v5
#      - name: Upload artifact
#        uses: actions/upload-pages-artifact@v3
#        with:
#          # Upload entire repository
#          path: './docs/_build/html/'
#      - name: Deploy to GitHub Pages
#        id: deployment
#        uses: actions/deploy-pages@v4